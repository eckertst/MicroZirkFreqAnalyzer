/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package FreqAnalyzer;

import java.awt.BorderLayout;
import java.awt.event.MouseEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.commons.math3.stat.descriptive.moment.StandardDeviation;
import org.apache.commons.math3.stat.descriptive.moment.Mean;

/**
 *
 * @author eckerts
 */
public class MainFrame extends javax.swing.JFrame {

    SampleDisplayLabel dataDisplayLabel;
    SampleDisplayLabel transformDisplayLabel;
    private int lastMouseDraggedPossition;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        initMyStuff();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        zoomMarkButtonGroup = new javax.swing.ButtonGroup();
        jSplitPane1 = new javax.swing.JSplitPane();
        dataPanel = new javax.swing.JPanel();
        dataInfoPanel = new javax.swing.JPanel();
        xCoordDataLabel = new javax.swing.JLabel();
        yCoordDataLabel = new javax.swing.JLabel();
        standardZoomDataButton = new javax.swing.JButton();
        zoomMarkPanel = new javax.swing.JPanel();
        zoomShiftRadioButton = new javax.swing.JRadioButton();
        markRadioButton = new javax.swing.JRadioButton();
        indexLabel = new javax.swing.JLabel();
        markedPanel = new javax.swing.JPanel();
        markedLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        transformationPanel = new javax.swing.JPanel();
        transformationInfoPanel = new javax.swing.JPanel();
        xCoordTransformLabel = new javax.swing.JLabel();
        yCoordTransformLabel = new javax.swing.JLabel();
        reciprocalCheckbox = new javax.swing.JCheckBox();
        standardZoomTransformButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        hmFile = new javax.swing.JMenu();
        fileMenuItemOpen = new javax.swing.JMenuItem();
        hmTransform = new javax.swing.JMenu();
        transformMenuItemTransform = new javax.swing.JMenuItem();
        hmHelp = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1000, 600));

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        dataPanel.setToolTipText("Zoom mit Mousrad, Verschieben mit Mouse");
        dataPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                dataPanelMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                dataPanelMouseMoved(evt);
            }
        });
        dataPanel.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                dataPanelMouseWheelMoved(evt);
            }
        });
        dataPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                dataPanelMousePressed(evt);
            }
        });
        dataPanel.setLayout(new java.awt.BorderLayout());

        dataInfoPanel.setPreferredSize(new java.awt.Dimension(718, 30));

        xCoordDataLabel.setText("x:");

        yCoordDataLabel.setText("y:");
        yCoordDataLabel.setPreferredSize(null);

        standardZoomDataButton.setText("Standard Zoom");
        standardZoomDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                standardZoomDataButtonActionPerformed(evt);
            }
        });

        zoomMarkPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        zoomMarkPanel.setPreferredSize(new java.awt.Dimension(146, 30));

        zoomShiftRadioButton.setText("zoom/shift");
        zoomShiftRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomShiftRadioButtonActionPerformed(evt);
            }
        });

        markRadioButton.setSelected(true);
        markRadioButton.setText("mark");
        markRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markRadioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout zoomMarkPanelLayout = new javax.swing.GroupLayout(zoomMarkPanel);
        zoomMarkPanel.setLayout(zoomMarkPanelLayout);
        zoomMarkPanelLayout.setHorizontalGroup(
            zoomMarkPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(zoomMarkPanelLayout.createSequentialGroup()
                .addComponent(zoomShiftRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(markRadioButton)
                .addGap(0, 8, Short.MAX_VALUE))
        );
        zoomMarkPanelLayout.setVerticalGroup(
            zoomMarkPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(zoomMarkPanelLayout.createSequentialGroup()
                .addGroup(zoomMarkPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(markRadioButton)
                    .addComponent(zoomShiftRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 3, Short.MAX_VALUE))
        );

        indexLabel.setText("Index:");

        markedPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        markedLabel.setText("marked: nothing");

        saveButton.setText("save as");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout markedPanelLayout = new javax.swing.GroupLayout(markedPanel);
        markedPanel.setLayout(markedPanelLayout);
        markedPanelLayout.setHorizontalGroup(
            markedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(markedPanelLayout.createSequentialGroup()
                .addComponent(markedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saveButton))
        );
        markedPanelLayout.setVerticalGroup(
            markedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(markedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(markedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(saveButton))
        );

        javax.swing.GroupLayout dataInfoPanelLayout = new javax.swing.GroupLayout(dataInfoPanel);
        dataInfoPanel.setLayout(dataInfoPanelLayout);
        dataInfoPanelLayout.setHorizontalGroup(
            dataInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataInfoPanelLayout.createSequentialGroup()
                .addComponent(xCoordDataLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(yCoordDataLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(indexLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(markedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(zoomMarkPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(standardZoomDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        dataInfoPanelLayout.setVerticalGroup(
            dataInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataInfoPanelLayout.createSequentialGroup()
                .addGroup(dataInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dataInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(xCoordDataLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(yCoordDataLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(indexLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dataInfoPanelLayout.createSequentialGroup()
                        .addGroup(dataInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(standardZoomDataButton)
                            .addComponent(zoomMarkPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(markedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        dataPanel.add(dataInfoPanel, java.awt.BorderLayout.PAGE_END);

        jSplitPane1.setTopComponent(dataPanel);

        transformationPanel.setToolTipText("Zoom mit Mousrad, Verschieben mit Mouse");
        transformationPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                transformationPanelMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                transformationPanelMouseMoved(evt);
            }
        });
        transformationPanel.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                transformationPanelMouseWheelMoved(evt);
            }
        });
        transformationPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                transformationPanelMousePressed(evt);
            }
        });
        transformationPanel.setLayout(new java.awt.BorderLayout());

        transformationInfoPanel.setPreferredSize(new java.awt.Dimension(718, 30));

        xCoordTransformLabel.setText("x");

        yCoordTransformLabel.setText("y");

        reciprocalCheckbox.setSelected(true);
        reciprocalCheckbox.setText("Anzeiige in Periodendauer");
        reciprocalCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reciprocalCheckboxActionPerformed(evt);
            }
        });

        standardZoomTransformButton.setText("Standard Zoom");
        standardZoomTransformButton.setPreferredSize(new java.awt.Dimension(116, 17));
        standardZoomTransformButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                standardZoomTransformButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout transformationInfoPanelLayout = new javax.swing.GroupLayout(transformationInfoPanel);
        transformationInfoPanel.setLayout(transformationInfoPanelLayout);
        transformationInfoPanelLayout.setHorizontalGroup(
            transformationInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(transformationInfoPanelLayout.createSequentialGroup()
                .addComponent(xCoordTransformLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(yCoordTransformLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(reciprocalCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 456, Short.MAX_VALUE)
                .addComponent(standardZoomTransformButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        transformationInfoPanelLayout.setVerticalGroup(
            transformationInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(standardZoomTransformButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, transformationInfoPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(transformationInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reciprocalCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yCoordTransformLabel)
                    .addComponent(xCoordTransformLabel)))
        );

        transformationPanel.add(transformationInfoPanel, java.awt.BorderLayout.PAGE_END);

        jSplitPane1.setRightComponent(transformationPanel);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        hmFile.setText("File");

        fileMenuItemOpen.setText("open data textfile");
        fileMenuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuItemOpenActionPerformed(evt);
            }
        });
        hmFile.add(fileMenuItemOpen);

        jMenuBar1.add(hmFile);

        hmTransform.setText("Transformation");

        transformMenuItemTransform.setText("Fast Sine Transformation");
        transformMenuItemTransform.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transformMenuItemTransformActionPerformed(evt);
            }
        });
        hmTransform.add(transformMenuItemTransform);

        jMenuBar1.add(hmTransform);

        hmHelp.setText("Hilfe");

        helpMenuItem.setText("kurze Anleitung");
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuItemActionPerformed(evt);
            }
        });
        hmHelp.add(helpMenuItem);

        jMenuBar1.add(hmHelp);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileMenuItemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuItemOpenActionPerformed
        
        //load data
        new FileOpenDialog(this, true).setVisible(true);
        ArrayList<Double> data = new ArrayList<>(); 
        double value;
        try {
            Scanner dataFile = new Scanner(new File(Globals.pathToDataFile)); 
            try {
                while(dataFile.hasNextLine()){
                    String line = dataFile.nextLine().trim();
                    //System.out.println("test:");               
                    //System.out.println(line);
                        if(line.isEmpty()){
                            data.add(data.get(data.size()-1));
                        } else{
                            data.add(new Double(line)); 
                        }  
                }
            } catch(Exception ex){
                    JOptionPane.showMessageDialog(this, "Bad data format."
                + " Please check if your data has a point as digital separator.", "Error", 
                                JOptionPane.ERROR_MESSAGE);
                }
            dataFile.close();   
            
        } catch (FileNotFoundException ex) {
        
        }
        this.setTitle(Globals.pathToDataFile);
        

        //replace outliers and remove bias
        double[] values = new double[data.size()];
        for (int i=0; i<data.size(); ++i) values[i]=data.get(i);
        Mean mean = new Mean();
        StandardDeviation standardDev = new StandardDeviation();
        double average;
        double stDev;
        
        if (!data.isEmpty()){
            if(Globals.replaceOutliers == Globals.REPLACE_OUTLIERS_AUTO){               
                average = mean.evaluate(values);
                stDev = standardDev.evaluate(values);  
                if(data.get(0)-average > Globals.outliersTolerance*stDev) data.set(0, 0.0);
                for (int i=1; i<data.size(); ++i){
                    if(data.get(i)-average > Globals.outliersTolerance*stDev){
                        data.set(i, data.get(i-1));
                    }
                }
            }
            else if(Globals.replaceOutliers == Globals.REPLACE_OUTLIERS_MANUALLY){
                for (int i=1; i<data.size(); ++i){
                    if(data.get(i) < Globals.outliersLowerBound 
                            || data.get(i) > Globals.outliersUpperBound){
                        data.set(i, data.get(i-1));
                    }
                }   
            }
            
            if(Globals.removeBias){
                values = new double[data.size()];
                for (int i=0; i<data.size(); ++i) values[i]=data.get(i);
                average = mean.evaluate(values);
                for (int i=0; i<data.size(); ++i){
                    data.set(i, data.get(i)-average);
                }
            }            
        }

           

        //Adjust sample for FFT:
        //First Element has to be 0
        if(data.get(0).doubleValue()!=0.0) data.add(0, new Double(0)); 
        //Size has to be a power of 2
        int n = data.size();
        double log2 = Math.log(data.size())/Math.log(2);
        int newSize = (int)Math.pow(2, (int)log2+1);
        for(int i = 0; i<(newSize-n); ++i){
            data.add(new Double(0));
        }


        //put data in a TimeSample object this object in a SampleDisplayPanel
        try{
            dataPanel.remove(dataDisplayLabel);
        } catch (Exception ex) {
            
        }
        TimeSample timeSample = new TimeSample(data, Globals.samplingRate, false);
        dataDisplayLabel = new SampleDisplayLabel(timeSample);        
        dataPanel.add(dataDisplayLabel, BorderLayout.CENTER);        
        this.pack();
        

        
    }//GEN-LAST:event_fileMenuItemOpenActionPerformed

        
    private void dataPanelMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_dataPanelMouseWheelMoved
        
       //zooming
        if(Globals.zoomMarkMode == Globals.ZOOM_MARK_MODE_ZOOM){
            int notches = evt.getWheelRotation();
            double zoomFactorRel = 1 + notches * Globals.zoomPerMousewheelNotch;
            int zoomCentre = evt.getX();        
            try {
                dataDisplayLabel.zoomAround(zoomFactorRel, zoomCentre);
            } catch (Exception ex) {

            }   
        }
    }//GEN-LAST:event_dataPanelMouseWheelMoved

    private void dataPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataPanelMouseMoved
             
        try {
            int roundingFactor = (int)Math.pow(10, Globals.roundingLevel);
            double xVal;   
            xVal = dataDisplayLabel.getXUnitForXPos(evt.getX());
            xVal = (double)Math.round(xVal*roundingFactor)/roundingFactor;
            double yVal = dataDisplayLabel.getValForYPos(evt.getY());
            yVal = (double)Math.round(yVal*roundingFactor)/roundingFactor;
            String xUnit = dataDisplayLabel.getXUnit();
            int index = (int)Math.round(dataDisplayLabel.getIndexForXPos(evt.getX()));
            xCoordDataLabel.setText("x: " + xVal + xUnit);
            yCoordDataLabel.setText("y: " + yVal);
            indexLabel.setText("Index: " + index);
        } catch (Exception ex) {
            
        }
        
    }//GEN-LAST:event_dataPanelMouseMoved

    private void dataPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataPanelMouseDragged
        int deltaX = evt.getX() - lastMouseDraggedPossition;        
        if(Globals.zoomMarkMode == Globals.ZOOM_MARK_MODE_ZOOM) 
            dataDisplayLabel.shift(deltaX);        
        else if (Globals.zoomMarkMode == Globals.ZOOM_MARK_MODE_MARK)            
            markedLabel.setText(dataDisplayLabel.mark(dataDisplayLabel.getMarkedFromXPos(), evt.getX(), evt.getX()));        
        lastMouseDraggedPossition = evt.getX();
    }//GEN-LAST:event_dataPanelMouseDragged

    private void dataPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataPanelMousePressed
        if (evt.getButton() == MouseEvent.BUTTON1) lastMouseDraggedPossition = evt.getX();
        if (Globals.zoomMarkMode == Globals.ZOOM_MARK_MODE_MARK){
            dataDisplayLabel.mark(evt.getX(), evt.getX(), evt.getX());
            markedLabel.setText("marked: nothing");
        }
    }//GEN-LAST:event_dataPanelMousePressed

    private void standardZoomDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_standardZoomDataButtonActionPerformed
        dataDisplayLabel.zoom(1);
    }//GEN-LAST:event_standardZoomDataButtonActionPerformed

    private void transformMenuItemTransformActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transformMenuItemTransformActionPerformed
        ArrayList<Double> dataList = FFTransformer.transform(dataDisplayLabel.getSample().getData());
        FreqSample freqSamp = new FreqSample(dataList, Globals.samplingRate, Sample.DISPLAY_MODE_RECIPROCAL, false);        
        try{
            transformationPanel.remove(transformDisplayLabel);
        } catch (Exception ex) {
            
        }
        transformDisplayLabel = new SampleDisplayLabel(freqSamp, Globals.standardZoomFactorTransformed, 0);
        transformationPanel.add(transformDisplayLabel, BorderLayout.CENTER);
        reciprocalCheckbox.setSelected(true);
        this.pack();
    }//GEN-LAST:event_transformMenuItemTransformActionPerformed

    private void transformationPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_transformationPanelMouseMoved
        try {
            int roundingFactor = (int)Math.pow(10, Globals.roundingLevel);
            double xVal;   
            xVal = transformDisplayLabel.getXUnitForXPos(evt.getX());
            if (transformDisplayLabel.getSample().getDisplayMode() == Sample.DISPLAY_MODE_STANDARD)
                xVal = (double)Math.round(xVal*roundingFactor)/roundingFactor;
            else if (transformDisplayLabel.getSample().getDisplayMode() == Sample.DISPLAY_MODE_RECIPROCAL)
                xVal = (double)Math.round(1/xVal*roundingFactor)/roundingFactor;
            double yVal = transformDisplayLabel.getValForYPos(evt.getY());
            yVal = (double)Math.round(yVal*roundingFactor)/roundingFactor;
            String xUnit = "";
            if (transformDisplayLabel.getSample().getDisplayMode() == Sample.DISPLAY_MODE_STANDARD)
                xUnit = transformDisplayLabel.getXUnit();
            else if (transformDisplayLabel.getSample().getDisplayMode() == Sample.DISPLAY_MODE_RECIPROCAL)
                xUnit = transformDisplayLabel.getSample().getxUnitReciprocal();
            xCoordTransformLabel.setText("x: " + xVal + xUnit);
            yCoordTransformLabel.setText("y: " + yVal);
        } catch (Exception ex) {
            
        }
    }//GEN-LAST:event_transformationPanelMouseMoved

    private void transformationPanelMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_transformationPanelMouseWheelMoved
        //zooming
        int notches = evt.getWheelRotation();
        double zoomFactor = 1 + notches*Globals.zoomPerMousewheelNotch;//*Globals.zoomFactorFreq;
        int zoomCentre = evt.getX();        
        try {
            transformDisplayLabel.zoomAround(zoomFactor, zoomCentre);
        } catch (Exception ex) {
            
        }   
    }//GEN-LAST:event_transformationPanelMouseWheelMoved

    private void transformationPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_transformationPanelMouseDragged
        int deltaX = evt.getX() - lastMouseDraggedPossition;
        lastMouseDraggedPossition = evt.getX();
        transformDisplayLabel.shift(deltaX);
    }//GEN-LAST:event_transformationPanelMouseDragged

    private void transformationPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_transformationPanelMousePressed
        if (evt.getButton() == MouseEvent.BUTTON1) lastMouseDraggedPossition = evt.getX();
    }//GEN-LAST:event_transformationPanelMousePressed

    private void reciprocalCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reciprocalCheckboxActionPerformed
        if(reciprocalCheckbox.isSelected())
            transformDisplayLabel.getSample().setDisplayMode(Sample.DISPLAY_MODE_RECIPROCAL);
        else transformDisplayLabel.getSample().setDisplayMode(Sample.DISPLAY_MODE_STANDARD);
        transformDisplayLabel.repaint();
    }//GEN-LAST:event_reciprocalCheckboxActionPerformed

    private void standardZoomTransformButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_standardZoomTransformButtonActionPerformed
        transformDisplayLabel.zoom(Globals.standardZoomFactorTransformed);
    }//GEN-LAST:event_standardZoomTransformButtonActionPerformed

    private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_helpMenuItemActionPerformed

    private void markRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markRadioButtonActionPerformed
        Globals.zoomMarkMode = Globals.ZOOM_MARK_MODE_MARK;
        markedLabel.setEnabled(true);
        saveButton.setEnabled(true);
    }//GEN-LAST:event_markRadioButtonActionPerformed

    private void zoomShiftRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomShiftRadioButtonActionPerformed
        Globals.zoomMarkMode = Globals.ZOOM_MARK_MODE_ZOOM;
        markedLabel.setEnabled(false);
        saveButton.setEnabled(false);
    }//GEN-LAST:event_zoomShiftRadioButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser(System.getProperty("user.dir"));
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setDialogType(JFileChooser.SAVE_DIALOG);
        String path = "";
        BufferedWriter writer = null;
        int fromIndex = (int)Math.round(dataDisplayLabel.getSample().getMarkedFromIndex());
        int toIndex = (int)Math.round(dataDisplayLabel.getSample().getMarkedToIndex());
        String stringToWrite = "";
        
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) 
            path = fileChooser.getSelectedFile().getAbsolutePath();
        File destinationFile = new File(path);
        try {
            writer = new BufferedWriter(new FileWriter(destinationFile));            
            for (int i = fromIndex; i < toIndex; ++i){
                stringToWrite = Double.toString(dataDisplayLabel.getSample().getValueForIndex(i));
                stringToWrite = stringToWrite.replace('.', ',');
                writer.write(stringToWrite);
                writer.newLine();
            }
        } catch (Exception ex){
            ex.printStackTrace();            
        } finally {
            try {
                // Close the writer regardless of what happens...
                writer.close();
            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel dataInfoPanel;
    private javax.swing.JPanel dataPanel;
    private javax.swing.JMenuItem fileMenuItemOpen;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JMenu hmFile;
    private javax.swing.JMenu hmHelp;
    private javax.swing.JMenu hmTransform;
    private javax.swing.JLabel indexLabel;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JRadioButton markRadioButton;
    private javax.swing.JLabel markedLabel;
    private javax.swing.JPanel markedPanel;
    private javax.swing.JCheckBox reciprocalCheckbox;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton standardZoomDataButton;
    private javax.swing.JButton standardZoomTransformButton;
    private javax.swing.JMenuItem transformMenuItemTransform;
    private javax.swing.JPanel transformationInfoPanel;
    private javax.swing.JPanel transformationPanel;
    private javax.swing.JLabel xCoordDataLabel;
    private javax.swing.JLabel xCoordTransformLabel;
    private javax.swing.JLabel yCoordDataLabel;
    private javax.swing.JLabel yCoordTransformLabel;
    private javax.swing.ButtonGroup zoomMarkButtonGroup;
    private javax.swing.JPanel zoomMarkPanel;
    private javax.swing.JRadioButton zoomShiftRadioButton;
    // End of variables declaration//GEN-END:variables


    void initMyStuff(){
        jSplitPane1.setDividerLocation(0.5);  
        zoomMarkButtonGroup.add(zoomShiftRadioButton);
        zoomMarkButtonGroup.add(markRadioButton);
        
        this.pack();
    }
    
    /**
     * Checkt, ob der eingegebene String einem double-Wert entspricht.
     * @param myString
     * @return das Double-Objekt, falls der Check erfolgreich war, falls nicht, das 
     * Double-Objekt, das zum Wert 0.0 gehört.
     */
    Double checkString (String myString){
        final String Digits     = "(\\p{Digit}+)";
        final String HexDigits  = "(\\p{XDigit}+)";
        // an exponent is 'e' or 'E' followed by an optionally
        // signed decimal integer.
        final String Exp        = "[eE][+-]?"+Digits;
        final String fpRegex    =
            ("[\\x00-\\x20]*"+  // Optional leading "whitespace"
             "[+-]?(" + // Optional sign character
             "NaN|" +           // "NaN" string
             "Infinity|" +      // "Infinity" string

             // A decimal floating-point string representing a finite positive
             // number without a leading sign has at most five basic pieces:
             // Digits . Digits ExponentPart FloatTypeSuffix
             //
             // Since this method allows integer-only strings as input
             // in addition to strings of floating-point literals, the
             // two sub-patterns below are simplifications of the grammar
             // productions from section 3.10.2 of
             // The Java™ Language Specification.

             // Digits ._opt Digits_opt ExponentPart_opt FloatTypeSuffix_opt
             "((("+Digits+"(\\.)?("+Digits+"?)("+Exp+")?)|"+

             // . Digits ExponentPart_opt FloatTypeSuffix_opt
             "(\\.("+Digits+")("+Exp+")?)|"+

             // Hexadecimal strings
             "((" +
              // 0[xX] HexDigits ._opt BinaryExponent FloatTypeSuffix_opt
              "(0[xX]" + HexDigits + "(\\.)?)|" +

              // 0[xX] HexDigits_opt . HexDigits BinaryExponent FloatTypeSuffix_opt
              "(0[xX]" + HexDigits + "?(\\.)" + HexDigits + ")" +

              ")[pP][+-]?" + Digits + "))" +
             "[fFdD]?))" +
             "[\\x00-\\x20]*");// Optional trailing "whitespace"

        if (Pattern.matches(fpRegex, myString))
            return Double.valueOf(myString); // Will not throw NumberFormatException
        else {
            System.out.println("String '" + myString + "' repräsentiert keinen double-Wert");
            return new Double(0);
        }
    }
    
    
}
